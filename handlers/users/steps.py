from aiogram import types
from aiogram.dispatcher import FSMContext

from data.steps_data import bull_remont_types, exc_remont_types
from handlers.users.start import cq_start
from keyboards.default.keyboards import done_button
from keyboards.inline.keyboards import bulldozer_num, excavator_num, exc_remont_list, bull_remont_list, back_button
from loader import dp, bot
from states.user_state import UserStep


@dp.callback_query_handler(text="bulldozers")
async def bulldozers(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(tech="–ë—É–ª—å–¥–æ–∑–µ—Ä")
    await call.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏ <i>–ë—É–ª—å–¥–æ–∑–µ—Ä</i>:", reply_markup=bulldozer_num)


@dp.callback_query_handler(text="excavator")
async def excavator(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(tech="–≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä")
    await call.message.answer("‚úÖ –í–µ–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ—Ö–Ω–∏–∫–∏ <i>–≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä—ã</i>:", reply_markup=excavator_num)


@dp.callback_query_handler(text_contains="bull:", state='*')
async def bull_type(call: types.CallbackQuery, state: FSMContext):
    tech = (await state.get_data()).get('tech')
    if tech is None or tech != "–ë—É–ª—å–¥–æ–∑–µ—Ä":
        await state.reset_state(with_data=True)
        await cq_start(call)
        return
    await state.reset_state(with_data=False)
    number = call.data.split(":")[1]
    await state.update_data(number=number)
    await call.message.answer("‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç –¥–ª—è –ë—É–ª—å–¥–æ–∑–µ—Ä–∞:", reply_markup=bull_remont_list)


@dp.callback_query_handler(text_contains="exc:", state='*')
async def exc_type(call: types.CallbackQuery, state: FSMContext):
    tech = (await state.get_data()).get('tech')
    if tech is None or tech != "–≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä":
        await state.reset_state(with_data=True)
        await cq_start(call)
        return

    await state.reset_state(with_data=False)
    number = call.data.split(":")[1]
    await state.update_data(number=number)
    await call.message.answer("‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç –¥–ª—è –≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä–∞:", reply_markup=exc_remont_list)


@dp.callback_query_handler(text_contains="bull_remont")
async def bull_remont(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get('tech') is None or data.get('tech') != "–ë—É–ª—å–¥–æ–∑–µ—Ä" or data.get('number')[0] != '–ë':
        await state.reset_state(with_data=True)
        await cq_start(call)
        return

    remont_type = bull_remont_types[int(call.data.split(':')[1])]
    await state.update_data(remont_type=remont_type)
    await call.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úÖ–ó–∞–≥—Ä—É–∑–∏—Ç—å", reply_markup=done_button)
    await UserStep.before.set()


@dp.callback_query_handler(text_contains="exc_remont")
async def exc_remont(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get('tech') is None or data.get('tech') != "–≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä" or data.get('number')[0] != '–≠':
        await state.reset_state(with_data=True)
        await cq_start(call)
        return

    remont_type = exc_remont_types[int(call.data.split(':')[1])]
    await state.update_data(remont_type=remont_type)
    await call.message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úÖ–ó–∞–≥—Ä—É–∑–∏—Ç—å", reply_markup=done_button)
    await UserStep.before.set()


@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", state=UserStep.before)
async def back_before(message: types.Message, state: FSMContext):
    await state.reset_state(with_data=False)
    await state.update_data(photo_before=None)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=types.ReplyKeyboardRemove())
    tech = (await state.get_data()).get('tech')
    if tech == '–ë—É–ª—å–¥–æ–∑–µ—Ä':
        await message.answer('‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç –¥–ª—è –ë—É–ª—å–¥–æ–∑–µ—Ä–∞:', reply_markup=bull_remont_list)
        return
    await message.answer("‚öôÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–º–æ–Ω—Ç –¥–ª—è –≠–∫—Å–∫–æ–≤–∞—Ç–æ—Ä–∞:", reply_markup=exc_remont_list)


@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥", state=UserStep.after)
async def back_after(message: types.Message, state: FSMContext):
    await UserStep.before.set()
    await state.update_data(photo_after=None)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–æ, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚úÖ–ó–∞–≥—Ä—É–∑–∏—Ç—å", reply_markup=done_button)
